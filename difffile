diff --git a/Dockerfile b/Dockerfile
index c06259a..ad4adc5 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -12,9 +12,10 @@ COPY go.sum go.sum
 RUN go mod download
 
 # Copy the go source
-COPY cmd/main.go cmd/main.go
-COPY api/ api/
-COPY internal/controller/ internal/controller/
+# COPY cmd/main.go cmd/main.go
+# COPY api/ api/
+# COPY internal/controller/ internal/controller/
+COPY . ./
 
 # Build
 # the GOARCH has not a default value to allow the binary be built according to the host where the command
diff --git a/difffile b/difffile
index 281f7d3..e69de29 100644
--- a/difffile
+++ b/difffile
@@ -1,406 +0,0 @@
-diff --git a/go.mod b/go.mod
-index 3320683..44141bc 100644
---- a/go.mod
-+++ b/go.mod
-@@ -14,7 +14,9 @@ require (
- )
- 
- require (
-+	github.com/blang/semver/v4 v4.0.0 // indirect
- 	github.com/go-task/slim-sprig/v3 v3.0.0 // indirect
-+	github.com/gobuffalo/flect v1.0.2 // indirect
- 	github.com/matttproud/golang_protobuf_extensions/v2 v2.0.0 // indirect
- )
- 
-diff --git a/go.sum b/go.sum
-index 1e367e3..5506140 100644
---- a/go.sum
-+++ b/go.sum
-@@ -1,5 +1,7 @@
- github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
- github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
-+github.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=
-+github.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=
- github.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=
- github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
- github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
-@@ -27,6 +29,8 @@ github.com/go-openapi/swag v0.22.3 h1:yMBqmnQ0gyZvEb/+KzuWZOXgllrXT4SADYbvDaXHv/
- github.com/go-openapi/swag v0.22.3/go.mod h1:UzaqsxGiab7freDnrUUra0MwWfN/q7tE4j+VcZ0yl14=
- github.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=
- github.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=
-+github.com/gobuffalo/flect v1.0.2 h1:eqjPGSo2WmjgY2XlpGwo2NXgL3RucAKo4k4qQMNA5sA=
-+github.com/gobuffalo/flect v1.0.2/go.mod h1:A5msMlrHtLqh9umBSnvabjsMrCcCpAyzglnDvkbYKHs=
- github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
- github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
- github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
-diff --git a/internal/controller/kinxcloudcontrollermanager_controller.go b/internal/controller/kinxcloudcontrollermanager_controller.go
-index aeb386e..3f917d0 100644
---- a/internal/controller/kinxcloudcontrollermanager_controller.go
-+++ b/internal/controller/kinxcloudcontrollermanager_controller.go
-@@ -25,6 +25,7 @@ import (
- 	"k8s.io/apimachinery/pkg/api/errors"
- 	"k8s.io/apimachinery/pkg/runtime"
- 	"k8s.io/apimachinery/pkg/types"
-+	kerrors "k8s.io/apimachinery/pkg/util/errors"
- 	"k8s.io/utils/ptr"
- 	ctrl "sigs.k8s.io/controller-runtime"
- 	"sigs.k8s.io/controller-runtime/pkg/client"
-@@ -36,10 +37,14 @@ import (
- 	appsv1 "k8s.io/api/apps/v1"
- 	corev1 "k8s.io/api/core/v1"
- 	rbacv1 "k8s.io/api/rbac/v1"
-+	"k8s.io/apimachinery/pkg/api/meta"
- 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
-+	"sigs.k8s.io/cluster-api/util"
-+	"sigs.k8s.io/cluster-api/util/patch"
- )
- 
- const kccmFinalizer = "github.com/chanho3114/kinx_cloud_controller_manager_finalizer"
-+const KinxClusterNameLabel = "crd/kinx.net/cluster-name"
- 
- // KinxCloudControllerManagerReconciler reconciles a KinxCloudControllerManager object
- type KinxCloudControllerManagerReconciler struct {
-@@ -48,6 +53,14 @@ type KinxCloudControllerManagerReconciler struct {
- 	Log    logr.Logger
- }
- 
-+type ccmDescendants struct {
-+	secret         corev1.Secret
-+	serviceaccount corev1.ServiceAccount
-+	role           rbacv1.Role
-+	rolebinding    rbacv1.RoleBinding
-+	deployment     appsv1.Deployment
-+}
-+
- //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers,verbs=get;list;watch;create;update;patch;delete
- //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers/status,verbs=get;update;patch
- //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers/finalizers,verbs=update
-@@ -66,7 +79,7 @@ type KinxCloudControllerManagerReconciler struct {
- //
- // For more details, check Reconcile and its Result here:
- // - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.16.3/pkg/reconcile
--func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
-+func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, req ctrl.Request) (_ ctrl.Result, reterr error) {
- 	log := r.Log.WithValues("kinxcloudcontrollermanager", req.NamespacedName)
- 	log.Info("Reconciling KinxCloudControllerManager")
- 
-@@ -80,10 +93,31 @@ func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, re
- 		return ctrl.Result{}, err
- 	}
- 
-+	// Initialize the patch helper.
-+	patchHelper, err := patch.NewHelper(ccm, r.Client)
-+	if err != nil {
-+		return ctrl.Result{}, err
-+	}
-+
-+	defer func() {
-+		log.Info("Status Reconcile")
-+		r.updateStatus(ctx, ccm)
-+
-+		// Always attempt to Patch the Cluster object and status after each reconciliation.
-+		// Patch ObservedGeneration only if the reconciliation completed successfully
-+		patchOpts := []patch.Option{}
-+		if reterr == nil {
-+			patchOpts = append(patchOpts, patch.WithStatusObservedGeneration{})
-+		}
-+		if err := patchCloudControllerManager(ctx, patchHelper, ccm, patchOpts...); err != nil {
-+			reterr = kerrors.NewAggregate([]error{reterr, err})
-+		}
-+	}()
-+
- 	if !controllerutil.ContainsFinalizer(ccm, kccmFinalizer) {
- 		log.Info("Finalizer 추가")
- 		controllerutil.AddFinalizer(ccm, kccmFinalizer)
--		return ctrl.Result{}, r.Update(ctx, ccm)
-+		// return ctrl.Result{}, r.Update(ctx, ccm)
- 	}
- 
- 	if !ccm.DeletionTimestamp.IsZero() {
-@@ -91,18 +125,8 @@ func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, re
- 		return r.reconcileDelete(ctx, ccm)
- 	}
- 
--	defer func() (ctrl.Result, error) {
--		log.Info("Status Reconcile")
--		err := r.reconcileStatus(ctx, ccm)
--		if err != nil {
--			return ctrl.Result{}, err
--		}
--
--		return ctrl.Result{}, nil
--	}()
--
- 	log.Info("Secret Reconcile")
--	err := r.reconcileSecret(ctx, ccm)
-+	err = r.reconcileSecret(ctx, ccm)
- 	if err != nil {
- 		return ctrl.Result{}, err
- 	}
-@@ -131,26 +155,6 @@ func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, re
- 		return ctrl.Result{}, err
- 	}
- 
--	log.Info("Status Reconcile")
--	err = r.reconcileStatus(ctx, ccm)
--	if err != nil {
--		return ctrl.Result{}, err
--	}
--
--	return ctrl.Result{}, nil
--}
--
--func (r *KinxCloudControllerManagerReconciler) reconcileDelete(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
--	log := r.Log.WithValues("Delete Reconcile", ccm.Namespace, ccm.Name)
--	log.Info("removing application")
--
--	controllerutil.RemoveFinalizer(ccm, kccmFinalizer)
--
--	err := r.Update(ctx, ccm)
--	if err != nil {
--		return ctrl.Result{}, fmt.Errorf("error removing finalizer %v", err)
--	}
--
- 	return ctrl.Result{}, nil
- }
- 
-@@ -182,13 +186,12 @@ func (r *KinxCloudControllerManagerReconciler) reconcileSecret(ctx context.Conte
- 	encodedCloudConf := base64.StdEncoding.EncodeToString([]byte(cloudConf))
- 
- 	secret := &corev1.Secret{
--		TypeMeta: metav1.TypeMeta{
--			Kind:       "Secret",
--			APIVersion: corev1.SchemeGroupVersion.String(),
--		},
- 		ObjectMeta: metav1.ObjectMeta{
- 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "ccm-cloud-config"),
- 			Namespace: ccm.ObjectMeta.Namespace,
-+			Labels: map[string]string{
-+				KinxClusterNameLabel: ccm.Spec.ClusterName,
-+			},
- 		},
- 		Data: map[string][]byte{
- 			"cloud.conf": []byte(encodedCloudConf),
-@@ -197,8 +200,8 @@ func (r *KinxCloudControllerManagerReconciler) reconcileSecret(ctx context.Conte
- 	}
- 
- 	controllerutil.SetOwnerReference(ccm, secret, r.Scheme, func(or *metav1.OwnerReference) {
--		or.BlockOwnerDeletion = boolPtr(true)
--		or.Controller = boolPtr(true)
-+		// or.BlockOwnerDeletion = boolPtr(true)
-+		// or.Controller = boolPtr(true)
- 	})
- 
- 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, secret, func() error {
-@@ -222,12 +225,15 @@ func (r *KinxCloudControllerManagerReconciler) reconcileServiceAccount(ctx conte
- 		ObjectMeta: metav1.ObjectMeta{
- 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
- 			Namespace: ccm.ObjectMeta.Namespace,
-+			Labels: map[string]string{
-+				KinxClusterNameLabel: ccm.Spec.ClusterName,
-+			},
- 		},
- 	}
- 
- 	controllerutil.SetOwnerReference(ccm, serviceAccount, r.Scheme, func(or *metav1.OwnerReference) {
--		or.BlockOwnerDeletion = boolPtr(true)
--		or.Controller = boolPtr(true)
-+		// or.BlockOwnerDeletion = boolPtr(true)
-+		// or.Controller = boolPtr(true)
- 	})
- 
- 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, serviceAccount, func() error {
-@@ -251,6 +257,9 @@ func (r *KinxCloudControllerManagerReconciler) reconcileRole(ctx context.Context
- 		ObjectMeta: metav1.ObjectMeta{
- 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
- 			Namespace: ccm.Namespace,
-+			Labels: map[string]string{
-+				KinxClusterNameLabel: ccm.Spec.ClusterName,
-+			},
- 		},
- 		Rules: []rbacv1.PolicyRule{
- 			{
-@@ -317,8 +326,8 @@ func (r *KinxCloudControllerManagerReconciler) reconcileRole(ctx context.Context
- 	}
- 
- 	controllerutil.SetOwnerReference(ccm, role, r.Scheme, func(or *metav1.OwnerReference) {
--		or.BlockOwnerDeletion = boolPtr(true)
--		or.Controller = boolPtr(true)
-+		// or.BlockOwnerDeletion = boolPtr(true)
-+		// or.Controller = boolPtr(true)
- 	})
- 
- 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, role, func() error {
-@@ -358,14 +367,17 @@ func (r *KinxCloudControllerManagerReconciler) reconcileRoleBinding(ctx context.
- 		ObjectMeta: metav1.ObjectMeta{
- 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
- 			Namespace: ccm.Namespace,
-+			Labels: map[string]string{
-+				KinxClusterNameLabel: ccm.Spec.ClusterName,
-+			},
- 		},
- 		RoleRef:  roleRef,
- 		Subjects: subjects,
- 	}
- 
- 	controllerutil.SetOwnerReference(ccm, roleBinding, r.Scheme, func(or *metav1.OwnerReference) {
--		or.BlockOwnerDeletion = boolPtr(true)
--		or.Controller = boolPtr(true)
-+		// or.BlockOwnerDeletion = boolPtr(true)
-+		// or.Controller = boolPtr(true)
- 	})
- 
- 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, roleBinding, func() error {
-@@ -388,6 +400,9 @@ func (r *KinxCloudControllerManagerReconciler) reconcileDeployment(ctx context.C
- 		ObjectMeta: metav1.ObjectMeta{
- 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
- 			Namespace: ccm.Namespace,
-+			Labels: map[string]string{
-+				KinxClusterNameLabel: ccm.Spec.ClusterName,
-+			},
- 		},
- 		Spec: appsv1.DeploymentSpec{
- 			Replicas: int32Ptr(1),
-@@ -473,8 +488,8 @@ func (r *KinxCloudControllerManagerReconciler) reconcileDeployment(ctx context.C
- 	}
- 
- 	controllerutil.SetOwnerReference(ccm, deployment, r.Scheme, func(or *metav1.OwnerReference) {
--		or.BlockOwnerDeletion = boolPtr(true)
--		or.Controller = boolPtr(true)
-+		// or.BlockOwnerDeletion = boolPtr(true)
-+		// or.Controller = boolPtr(true)
- 	})
- 
- 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, deployment, func() error {
-@@ -490,8 +505,8 @@ func (r *KinxCloudControllerManagerReconciler) reconcileDeployment(ctx context.C
- 	return nil
- }
- 
--func (r *KinxCloudControllerManagerReconciler) reconcileStatus(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) error {
--	log := r.Log.WithValues("Status", ccm.Namespace, ccm.Name)
-+func (r *KinxCloudControllerManagerReconciler) updateStatus(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) error {
-+	// log := r.Log.WithValues("Status", ccm.Namespace, ccm.Name)
- 
- 	dep := &appsv1.Deployment{}
- 
-@@ -502,24 +517,112 @@ func (r *KinxCloudControllerManagerReconciler) reconcileStatus(ctx context.Conte
- 	if !reflect.DeepEqual(ccm.Status.Conditions, dep.Status.Conditions) {
- 		ccm.Status.Conditions = dep.Status.Conditions
- 
--		err := r.Status().Update(ctx, ccm)
-+		// err := r.Status().Update(ctx, ccm)
-+		// if err != nil {
-+		// 	log.Error(err, "Failed to update Memcached status")
-+		// 	return err
-+		// }
-+	}
-+
-+	return nil
-+}
-+
-+func (r *KinxCloudControllerManagerReconciler) reconcileDelete(_ context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
-+	log := r.Log.WithValues("Delete Reconcile", ccm.Namespace, ccm.Name)
-+	log.Info("removing application")
-+
-+	controllerutil.RemoveFinalizer(ccm, kccmFinalizer)
-+
-+	return ctrl.Result{}, nil
-+}
-+
-+func (r *KinxCloudControllerManagerReconciler) getDescendants(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ccmDescendants, error) {
-+	var descendants ccmDescendants
-+
-+	// Deployment
-+	if err := r.Get(ctx, types.NamespacedName{
-+		Namespace: ccm.Namespace,
-+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-+	}, &descendants.deployment); err != nil {
-+		return descendants, err
-+	}
-+
-+	// Secret
-+	if err := r.Get(ctx, types.NamespacedName{
-+		Namespace: ccm.Namespace,
-+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-+	}, &descendants.secret); err != nil {
-+		return descendants, err
-+	}
-+
-+	// Serviceaccount
-+	if err := r.Get(ctx, types.NamespacedName{
-+		Namespace: ccm.Namespace,
-+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-+	}, &descendants.serviceaccount); err != nil {
-+		return descendants, err
-+	}
-+
-+	// Role
-+	if err := r.Get(ctx, types.NamespacedName{
-+		Namespace: ccm.Namespace,
-+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-+	}, &descendants.role); err != nil {
-+		return descendants, err
-+	}
-+
-+	// Rolebinding
-+	if err := r.Get(ctx, types.NamespacedName{
-+		Namespace: ccm.Namespace,
-+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-+	}, &descendants.rolebinding); err != nil {
-+		return descendants, err
-+	}
-+
-+	return descendants, nil
-+}
-+
-+func (c ccmDescendants) filterOwnedDescendants(ccm *crdv1alpha1.KinxCloudControllerManager) ([]client.Object, error) {
-+	var ownedDescendants []client.Object
-+	eachFunc := func(o runtime.Object) error {
-+		obj := o.(client.Object)
-+		acc, err := meta.Accessor(obj)
- 		if err != nil {
--			log.Error(err, "Failed to update Memcached status")
--			return err
-+			return nil //nolint:nilerr // We don't want to exit the EachListItem loop, just continue
- 		}
-+
-+		if util.IsOwnedByObject(acc, ccm) {
-+			ownedDescendants = append(ownedDescendants, obj)
-+		}
-+
-+		return nil
- 	}
- 
--	return nil
-+	lists := []client.Object{
-+		&c.deployment,
-+		&c.secret,
-+		&c.rolebinding,
-+		&c.role,
-+		&c.serviceaccount,
-+	}
-+
-+	for _, list := range lists {
-+		if err := meta.EachListItem(list, eachFunc); err != nil {
-+			return nil, err
-+		}
-+	}
-+
-+	return ownedDescendants, nil
-+}
-+
-+func patchCloudControllerManager(ctx context.Context, patchHelper *patch.Helper, ccm *crdv1alpha1.KinxCloudControllerManager, options ...patch.Option) error {
-+	return patchHelper.Patch(ctx, ccm, options...)
- }
- 
- // SetupWithManager sets up the controller with the Manager.
- func (r *KinxCloudControllerManagerReconciler) SetupWithManager(mgr ctrl.Manager) error {
- 	return ctrl.NewControllerManagedBy(mgr).
- 		For(&crdv1alpha1.KinxCloudControllerManager{}).
--		Owns(&corev1.Secret{}).
--		Owns(&corev1.ServiceAccount{}).
--		Owns(&rbacv1.Role{}).
--		Owns(&rbacv1.RoleBinding{}).
- 		Owns(&appsv1.Deployment{}).
- 		WithOptions(controller.Options{MaxConcurrentReconciles: 10}).
- 		Complete(r)
diff --git a/internal/controller/kinxcloudcontrollermanager_controller.go b/internal/controller/kinxcloudcontrollermanager_controller.go
index 7855147..29ddb01 100644
--- a/internal/controller/kinxcloudcontrollermanager_controller.go
+++ b/internal/controller/kinxcloudcontrollermanager_controller.go
@@ -31,21 +31,16 @@ import (
 	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
 
 	crdv1alpha1 "github.com/chanho3114/kinx-cloud-controller-manager/api/v1alpha1"
-	kinxutil "github.com/chanho3114/kinx-cloud-controller-manager/util"
 	"github.com/chanho3114/kinx-cloud-controller-manager/util/ssa"
 	"github.com/go-logr/logr"
 	appsv1 "k8s.io/api/apps/v1"
 	corev1 "k8s.io/api/core/v1"
 	rbacv1 "k8s.io/api/rbac/v1"
-	"k8s.io/apimachinery/pkg/api/meta"
-	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"sigs.k8s.io/cluster-api/util"
 	"sigs.k8s.io/cluster-api/util/patch"
 )
 
 const kccmFinalizer = "kinx.net/cloud-controller-manager-finalizer"
-const KinxClusterNameLabel = "kinx.net/cluster-name"
-const managerName = "kinx-cloud-controller-manager"
 
 type ccmReconcileFunc func(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error)
 
@@ -57,14 +52,6 @@ type KinxCloudControllerManagerReconciler struct {
 	ssaCache ssa.Cache
 }
 
-type ccmDescendants struct {
-	secret         corev1.Secret
-	serviceaccount corev1.ServiceAccount
-	role           rbacv1.Role
-	rolebinding    rbacv1.RoleBinding
-	deployment     appsv1.Deployment
-}
-
 //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers,verbs=get;list;watch;create;update;patch;delete
 //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers/status,verbs=get;update;patch
 //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers/finalizers,verbs=update
@@ -105,18 +92,30 @@ func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, re
 
 	defer func() {
 		log.Info("Status Reconcile")
-		err := r.updateStatus(ctx, ccm)
-		if err != nil {
+
+		dep := &appsv1.Deployment{}
+		if err := r.Get(ctx, types.NamespacedName{
+			Namespace: ccm.Namespace,
+			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
+		}, dep); err != nil {
 			reterr = kerrors.NewAggregate([]error{reterr, err})
 		}
 
-		// Always attempt to Patch the Cluster object and status after each reconciliation.
-		// Patch ObservedGeneration only if the reconciliation completed successfully
+		log.Info("Current Deployment status")
+		log.Info(dep.Status.String())
+
+		if !reflect.DeepEqual(ccm.Status.Conditions, dep.Status.Conditions) {
+			log.Info("CCM Status와 다름")
+			ccm.Status.Conditions = dep.Status.Conditions
+		} else {
+			log.Info("No need to update status")
+		}
+
 		patchOpts := []patch.Option{}
 		if reterr == nil {
 			patchOpts = append(patchOpts, patch.WithStatusObservedGeneration{})
 		}
-		if err := patchCloudControllerManager(ctx, patchHelper, ccm, patchOpts...); err != nil {
+		if err := patchHelper.Patch(ctx, ccm, patchOpts...); err != nil {
 			reterr = kerrors.NewAggregate([]error{reterr, err})
 		}
 	}()
@@ -143,449 +142,6 @@ func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, re
 	return doReconcile(ctx, alwaysReconcile, ccm)
 }
 
-func (r *KinxCloudControllerManagerReconciler) reconcileSecret(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
-	log := r.Log.WithValues("Secret", types.NamespacedName{Namespace: ccm.Namespace, Name: ccm.Name})
-	/*
-		currentSecret := &corev1.Secret{}
-
-		if err := r.Get(ctx, types.NamespacedName{
-			Namespace: ccm.Namespace,
-			Name: fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "ccm-cloud-config"),
-			}, currentSecret); err != nil {
-			if !errors.IsNotFound(err) {
-				return ctrl.Result{}, err
-			}
-		}
-
-		// Initialize the patch helper.
-		patchHelper, err := patch.NewHelper(currentSecret, r.Client)
-		if err != nil {
-			return ctrl.Result{}, err
-		}
-
-		log.Info(currentSecret.String())
-	*/
-	data := `[Global]
-application-credential-id = "%s"
-application-credential-secret = "%s"
-auth-url = "%s"
-domain-name = "%s"
-tenant-name = "%s"
-
-[Networking]
-
-[LoadBalancer]
-use-octavia = "%t"
-
-[BlockStorage]
-
-[Metadata]
-
-[Route]
-`
-	// Secret 데이터를 생성
-	desiredCloudConf := fmt.Sprintf(data, ccm.Spec.ApplicationCredentialID, ccm.Spec.ApplicationCredentialSecret, ccm.Spec.AuthURL, ccm.Spec.UserDomainName, ccm.Spec.ProjectName, ccm.Spec.UseOctavia)
-
-	log.Info(desiredCloudConf)
-
-	// cloud.conf를 base64로 인코딩
-	// encodedCloudConf := base64.StdEncoding.EncodeToString([]byte(cloudConf))
-
-	desiredSecret := &corev1.Secret{
-		ObjectMeta: metav1.ObjectMeta{
-			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "ccm-cloud-config"),
-			Namespace: ccm.ObjectMeta.Namespace,
-			Labels: map[string]string{
-				KinxClusterNameLabel: ccm.Spec.ClusterName,
-			},
-			OwnerReferences: []metav1.OwnerReference{
-				{
-					APIVersion:         ccm.APIVersion,
-					Kind:               ccm.Kind,
-					Name:               ccm.Name,
-					UID:                ccm.UID,
-					Controller:         kinxutil.BoolPtr(false),
-					BlockOwnerDeletion: kinxutil.BoolPtr(false),
-				},
-			},
-		},
-		Data: map[string][]byte{
-			"cloud.conf": []byte(desiredCloudConf),
-		},
-		Type: corev1.SecretTypeOpaque,
-	}
-
-	if err := ssa.Patch(ctx, r.Client, managerName, desiredSecret); err != nil {
-		return ctrl.Result{}, err
-	}
-
-	return ctrl.Result{}, nil
-}
-
-func (r *KinxCloudControllerManagerReconciler) reconcileServiceAccount(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
-	log := r.Log.WithValues("ServiceAccount", types.NamespacedName{Namespace: ccm.Namespace, Name: ccm.Name})
-
-	currentServiceaccount := &corev1.ServiceAccount{}
-
-	// Initialize the patch helper.
-	patchHelper, err := patch.NewHelper(currentServiceaccount, r.Client)
-	if err != nil {
-		return ctrl.Result{}, err
-	}
-
-	log.Info(currentServiceaccount.String())
-
-	// ServiceAccount 객체를 생성합니다.
-	desiredServiceAccount := &corev1.ServiceAccount{
-		ObjectMeta: metav1.ObjectMeta{
-			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-			Namespace: ccm.ObjectMeta.Namespace,
-			Labels: map[string]string{
-				KinxClusterNameLabel: ccm.Spec.ClusterName,
-			},
-			OwnerReferences: []metav1.OwnerReference{
-				{
-					APIVersion:         ccm.APIVersion,
-					Kind:               ccm.Kind,
-					Name:               ccm.Name,
-					UID:                ccm.UID,
-					Controller:         kinxutil.BoolPtr(true),
-					BlockOwnerDeletion: kinxutil.BoolPtr(false),
-				},
-			},
-		},
-	}
-
-	log.Info(desiredServiceAccount.String())
-
-	patchOpts := []patch.Option{}
-	if err := patchHelper.Patch(ctx, desiredServiceAccount, patchOpts...); err != nil {
-		return ctrl.Result{}, err
-	}
-
-	return ctrl.Result{}, nil
-}
-
-func (r *KinxCloudControllerManagerReconciler) reconcileRole(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
-	log := r.Log.WithValues("Role", types.NamespacedName{Namespace: ccm.Namespace, Name: ccm.Name})
-
-	currentRole := &rbacv1.Role{}
-
-	// Initialize the patch helper.
-	patchHelper, err := patch.NewHelper(currentRole, r.Client)
-	if err != nil {
-		return ctrl.Result{}, err
-	}
-
-	log.Info(currentRole.String())
-
-	// Role 객체 생성
-	desiredRole := &rbacv1.Role{
-		ObjectMeta: metav1.ObjectMeta{
-			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-			Namespace: ccm.Namespace,
-			Labels: map[string]string{
-				KinxClusterNameLabel: ccm.Spec.ClusterName,
-			},
-			OwnerReferences: []metav1.OwnerReference{
-				{
-					APIVersion:         ccm.APIVersion,
-					Kind:               ccm.Kind,
-					Name:               ccm.Name,
-					UID:                ccm.UID,
-					Controller:         kinxutil.BoolPtr(true),
-					BlockOwnerDeletion: kinxutil.BoolPtr(false),
-				},
-			},
-		},
-		Rules: []rbacv1.PolicyRule{
-			{
-				APIGroups: []string{"coordination.k8s.io"},
-				Resources: []string{"leases"},
-				Verbs:     []string{"get", "create", "update"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"events"},
-				Verbs:     []string{"create", "patch", "update"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"nodes"},
-				Verbs:     []string{"*"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"nodes/status"},
-				Verbs:     []string{"patch"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"services"},
-				Verbs:     []string{"list", "patch", "update", "watch"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"services/status"},
-				Verbs:     []string{"patch"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"serviceaccounts/token"},
-				Verbs:     []string{"create"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"serviceaccounts"},
-				Verbs:     []string{"create", "get"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"persistentvolumes"},
-				Verbs:     []string{"*"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"endpoints"},
-				Verbs:     []string{"create", "get", "list", "watch", "update"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"configmaps"},
-				Verbs:     []string{"get", "list", "watch"},
-			},
-			{
-				APIGroups: []string{""},
-				Resources: []string{"secrets"},
-				Verbs:     []string{"list", "get", "watch"},
-			},
-		},
-	}
-
-	log.Info(desiredRole.String())
-
-	patchOpts := []patch.Option{}
-	if err := patchHelper.Patch(ctx, desiredRole, patchOpts...); err != nil {
-		return ctrl.Result{}, err
-	}
-
-	return ctrl.Result{}, nil
-}
-
-func (r *KinxCloudControllerManagerReconciler) reconcileRoleBinding(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
-	log := r.Log.WithValues("Rolebinding", types.NamespacedName{Namespace: ccm.Namespace, Name: ccm.Name})
-
-	currentRoleBinding := &rbacv1.RoleBinding{}
-
-	// Initialize the patch helper.
-	patchHelper, err := patch.NewHelper(currentRoleBinding, r.Client)
-	if err != nil {
-		return ctrl.Result{}, err
-	}
-
-	log.Info(currentRoleBinding.String())
-
-	// RoleRef 정보
-	roleRef := rbacv1.RoleRef{
-		APIGroup: rbacv1.SchemeGroupVersion.Group,
-		Kind:     "Role",
-		Name:     fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-	}
-
-	// Subjects 정보 (ServiceAccount)
-	subjects := []rbacv1.Subject{
-		{
-			Kind:      "ServiceAccount",
-			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-			Namespace: ccm.Namespace,
-		},
-	}
-
-	// RoleBinding 객체를 생성합니다.
-	desiredRoleBinding := &rbacv1.RoleBinding{
-		ObjectMeta: metav1.ObjectMeta{
-			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-			Namespace: ccm.Namespace,
-			Labels: map[string]string{
-				KinxClusterNameLabel: ccm.Spec.ClusterName,
-			},
-			OwnerReferences: []metav1.OwnerReference{
-				{
-					APIVersion:         ccm.APIVersion,
-					Kind:               ccm.Kind,
-					Name:               ccm.Name,
-					UID:                ccm.UID,
-					Controller:         kinxutil.BoolPtr(true),
-					BlockOwnerDeletion: kinxutil.BoolPtr(false),
-				},
-			},
-		},
-		RoleRef:  roleRef,
-		Subjects: subjects,
-	}
-
-	log.Info(desiredRoleBinding.String())
-
-	patchOpts := []patch.Option{}
-	if err := patchHelper.Patch(ctx, desiredRoleBinding, patchOpts...); err != nil {
-		return ctrl.Result{}, err
-	}
-
-	return ctrl.Result{}, nil
-}
-
-func (r *KinxCloudControllerManagerReconciler) reconcileDeployment(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
-	log := r.Log.WithValues("Deployment", types.NamespacedName{Namespace: ccm.Namespace, Name: ccm.Name})
-
-	currentDeployment := &appsv1.Deployment{}
-
-	// Initialize the patch helper.
-	patchHelper, err := patch.NewHelper(currentDeployment, r.Client)
-	if err != nil {
-		return ctrl.Result{}, err
-	}
-
-	log.Info(currentDeployment.String())
-
-	desiredDeployment := &appsv1.Deployment{
-		ObjectMeta: metav1.ObjectMeta{
-			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-			Namespace: ccm.Namespace,
-			Labels: map[string]string{
-				KinxClusterNameLabel: ccm.Spec.ClusterName,
-			},
-			OwnerReferences: []metav1.OwnerReference{
-				{
-					APIVersion:         ccm.APIVersion,
-					Kind:               ccm.Kind,
-					Name:               ccm.Name,
-					UID:                ccm.UID,
-					Controller:         kinxutil.BoolPtr(true),
-					BlockOwnerDeletion: kinxutil.BoolPtr(false),
-				},
-			},
-		},
-		Spec: appsv1.DeploymentSpec{
-			Replicas: kinxutil.Int32Ptr(1),
-			Selector: &metav1.LabelSelector{
-				MatchLabels: map[string]string{"app": "kinx-cloud-controller-manager"},
-			},
-			Template: corev1.PodTemplateSpec{
-				ObjectMeta: metav1.ObjectMeta{
-					Labels: map[string]string{"app": "kinx-cloud-controller-manager"},
-				},
-				Spec: corev1.PodSpec{
-					Containers: []corev1.Container{
-						{
-							Name:  "kinx-cloud-controller-manager",
-							Image: "registry.k8s.io/provider-os/openstack-cloud-controller-manager:v1.30.0",
-							Args: []string{
-								"/bin/openstack-cloud-controller-manager",
-								"--v=2",
-								"--cloud-config=$(CLOUD_CONFIG)",
-								"--cluster-name=$(CLUSTER_NAME)",
-								"--cloud-provider=openstack",
-								"--kubeconfig=$(KUBECONFIG)",
-								"--use-service-account-credentials=false",
-								"--leader-elect=false",
-								"--controllers=cloud-node,cloud-node-lifecycle,route,service",
-								"--bind-address=127.0.0.1",
-							},
-							Env: []corev1.EnvVar{
-								{
-									Name:  "CLOUD_CONFIG",
-									Value: "/etc/config/cloud.conf",
-								},
-								{
-									Name:  "CLUSTER_NAME",
-									Value: "kubernetes",
-								},
-								{
-									Name:  "KUBECONFIG",
-									Value: "/etc/config/kubeconfig/admin.conf",
-								},
-							},
-							VolumeMounts: []corev1.VolumeMount{
-								{
-									Name:      "cloud-config-volume",
-									MountPath: "/etc/config",
-									ReadOnly:  true,
-								},
-								{
-									Name:      "user-kubeconfig",
-									MountPath: "/etc/config/kubeconfig",
-									ReadOnly:  true,
-								},
-							},
-						},
-					},
-					SecurityContext: &corev1.PodSecurityContext{
-						RunAsUser: kinxutil.Int64Ptr(1001),
-					},
-					ServiceAccountName: fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-					Volumes: []corev1.Volume{
-						{
-							Name: "cloud-config-volume",
-							VolumeSource: corev1.VolumeSource{
-								Secret: &corev1.SecretVolumeSource{
-									SecretName:  fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "ccm-cloud-config"),
-									DefaultMode: kinxutil.Int32Ptr(420),
-								},
-							},
-						},
-						{
-							Name: "user-kubeconfig",
-							VolumeSource: corev1.VolumeSource{
-								Secret: &corev1.SecretVolumeSource{
-									SecretName:  fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "admin-kubeconfig"),
-									DefaultMode: kinxutil.Int32Ptr(420),
-								},
-							},
-						},
-					},
-				},
-			},
-		},
-	}
-
-	log.Info(desiredDeployment.String())
-
-	patchOpts := []patch.Option{}
-	if err := patchHelper.Patch(ctx, desiredDeployment, patchOpts...); err != nil {
-		return ctrl.Result{}, err
-	}
-
-	return ctrl.Result{}, nil
-}
-
-func (r *KinxCloudControllerManagerReconciler) updateStatus(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) error {
-	log := r.Log.WithValues("Status", types.NamespacedName{Namespace: ccm.Namespace, Name: ccm.Name})
-
-	dep := &appsv1.Deployment{}
-
-	if err := r.Get(ctx, types.NamespacedName{
-		Namespace: ccm.Namespace,
-		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-	}, dep); err != nil {
-		return err
-	}
-
-	log.Info("Current Deployment status", "Get", dep.Status.String())
-
-	if !reflect.DeepEqual(ccm.Status.Conditions, dep.Status.Conditions) {
-		log.Info("Desied Status와 다름")
-		ccm.Status.Conditions = dep.Status.Conditions
-
-		// err := r.Status().Update(ctx, ccm)
-		// if err != nil {
-		// 	log.Error(err, "Failed to update Memcached status")
-		// 	return err
-		// }
-	}
-
-	return nil
-}
-
 func (r *KinxCloudControllerManagerReconciler) reconcileDelete(_ context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
 	log := r.Log.WithValues("Delete Reconcile", types.NamespacedName{
 		Namespace: ccm.Namespace,
@@ -622,89 +178,6 @@ func doReconcile(ctx context.Context, funcs []ccmReconcileFunc, ccm *crdv1alpha1
 	return res, nil
 }
 
-func (r *KinxCloudControllerManagerReconciler) getDescendants(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ccmDescendants, error) {
-	var descendants ccmDescendants
-
-	// Deployment
-	if err := r.Get(ctx, types.NamespacedName{
-		Namespace: ccm.Namespace,
-		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-	}, &descendants.deployment); err != nil {
-		return descendants, err
-	}
-
-	// Secret
-	if err := r.Get(ctx, types.NamespacedName{
-		Namespace: ccm.Namespace,
-		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "ccm-cloud-config"),
-	}, &descendants.secret); err != nil {
-		return descendants, err
-	}
-
-	// Serviceaccount
-	if err := r.Get(ctx, types.NamespacedName{
-		Namespace: ccm.Namespace,
-		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-	}, &descendants.serviceaccount); err != nil {
-		return descendants, err
-	}
-
-	// Role
-	if err := r.Get(ctx, types.NamespacedName{
-		Namespace: ccm.Namespace,
-		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-	}, &descendants.role); err != nil {
-		return descendants, err
-	}
-
-	// Rolebinding
-	if err := r.Get(ctx, types.NamespacedName{
-		Namespace: ccm.Namespace,
-		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
-	}, &descendants.rolebinding); err != nil {
-		return descendants, err
-	}
-
-	return descendants, nil
-}
-
-func (c ccmDescendants) filterOwnedDescendants(ccm *crdv1alpha1.KinxCloudControllerManager) ([]client.Object, error) {
-	var ownedDescendants []client.Object
-	eachFunc := func(o runtime.Object) error {
-		obj := o.(client.Object)
-		acc, err := meta.Accessor(obj)
-		if err != nil {
-			return nil //nolint:nilerr // We don't want to exit the EachListItem loop, just continue
-		}
-
-		if util.IsOwnedByObject(acc, ccm) {
-			ownedDescendants = append(ownedDescendants, obj)
-		}
-
-		return nil
-	}
-
-	lists := []client.Object{
-		&c.deployment,
-		&c.secret,
-		&c.rolebinding,
-		&c.role,
-		&c.serviceaccount,
-	}
-
-	for _, list := range lists {
-		if err := meta.EachListItem(list, eachFunc); err != nil {
-			return nil, err
-		}
-	}
-
-	return ownedDescendants, nil
-}
-
-func patchCloudControllerManager(ctx context.Context, patchHelper *patch.Helper, ccm *crdv1alpha1.KinxCloudControllerManager, options ...patch.Option) error {
-	return patchHelper.Patch(ctx, ccm, options...)
-}
-
 // SetupWithManager sets up the controller with the Manager.
 func (r *KinxCloudControllerManagerReconciler) SetupWithManager(mgr ctrl.Manager) error {
 	err := ctrl.NewControllerManagedBy(mgr).
diff --git a/util/ssa/patch.go b/util/ssa/patch.go
index 75047ac..85fa540 100644
--- a/util/ssa/patch.go
+++ b/util/ssa/patch.go
@@ -153,6 +153,11 @@ func prepareModified(scheme *runtime.Scheme, obj client.Object) (*unstructured.U
 			{"metadata", "finalizers"},
 			{"metadata", "ownerReferences"},
 			{"spec"},
+			{"rule"},
+			{"rules"},
+			{"subjects"},
+			{"roleRef"},
+			{"data"},
 		},
 	})
 	return u, nil
