diff --git a/go.mod b/go.mod
index 3320683..44141bc 100644
--- a/go.mod
+++ b/go.mod
@@ -14,7 +14,9 @@ require (
 )
 
 require (
+	github.com/blang/semver/v4 v4.0.0 // indirect
 	github.com/go-task/slim-sprig/v3 v3.0.0 // indirect
+	github.com/gobuffalo/flect v1.0.2 // indirect
 	github.com/matttproud/golang_protobuf_extensions/v2 v2.0.0 // indirect
 )
 
diff --git a/go.sum b/go.sum
index 1e367e3..5506140 100644
--- a/go.sum
+++ b/go.sum
@@ -1,5 +1,7 @@
 github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=
 github.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=
+github.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=
+github.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=
 github.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=
 github.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=
 github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
@@ -27,6 +29,8 @@ github.com/go-openapi/swag v0.22.3 h1:yMBqmnQ0gyZvEb/+KzuWZOXgllrXT4SADYbvDaXHv/
 github.com/go-openapi/swag v0.22.3/go.mod h1:UzaqsxGiab7freDnrUUra0MwWfN/q7tE4j+VcZ0yl14=
 github.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=
 github.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=
+github.com/gobuffalo/flect v1.0.2 h1:eqjPGSo2WmjgY2XlpGwo2NXgL3RucAKo4k4qQMNA5sA=
+github.com/gobuffalo/flect v1.0.2/go.mod h1:A5msMlrHtLqh9umBSnvabjsMrCcCpAyzglnDvkbYKHs=
 github.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=
 github.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=
 github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
diff --git a/internal/controller/kinxcloudcontrollermanager_controller.go b/internal/controller/kinxcloudcontrollermanager_controller.go
index aeb386e..3f917d0 100644
--- a/internal/controller/kinxcloudcontrollermanager_controller.go
+++ b/internal/controller/kinxcloudcontrollermanager_controller.go
@@ -25,6 +25,7 @@ import (
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/runtime"
 	"k8s.io/apimachinery/pkg/types"
+	kerrors "k8s.io/apimachinery/pkg/util/errors"
 	"k8s.io/utils/ptr"
 	ctrl "sigs.k8s.io/controller-runtime"
 	"sigs.k8s.io/controller-runtime/pkg/client"
@@ -36,10 +37,14 @@ import (
 	appsv1 "k8s.io/api/apps/v1"
 	corev1 "k8s.io/api/core/v1"
 	rbacv1 "k8s.io/api/rbac/v1"
+	"k8s.io/apimachinery/pkg/api/meta"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"sigs.k8s.io/cluster-api/util"
+	"sigs.k8s.io/cluster-api/util/patch"
 )
 
 const kccmFinalizer = "github.com/chanho3114/kinx_cloud_controller_manager_finalizer"
+const KinxClusterNameLabel = "crd/kinx.net/cluster-name"
 
 // KinxCloudControllerManagerReconciler reconciles a KinxCloudControllerManager object
 type KinxCloudControllerManagerReconciler struct {
@@ -48,6 +53,14 @@ type KinxCloudControllerManagerReconciler struct {
 	Log    logr.Logger
 }
 
+type ccmDescendants struct {
+	secret         corev1.Secret
+	serviceaccount corev1.ServiceAccount
+	role           rbacv1.Role
+	rolebinding    rbacv1.RoleBinding
+	deployment     appsv1.Deployment
+}
+
 //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers,verbs=get;list;watch;create;update;patch;delete
 //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers/status,verbs=get;update;patch
 //+kubebuilder:rbac:groups=crd.kinx.net,resources=kinxcloudcontrollermanagers/finalizers,verbs=update
@@ -66,7 +79,7 @@ type KinxCloudControllerManagerReconciler struct {
 //
 // For more details, check Reconcile and its Result here:
 // - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.16.3/pkg/reconcile
-func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
+func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, req ctrl.Request) (_ ctrl.Result, reterr error) {
 	log := r.Log.WithValues("kinxcloudcontrollermanager", req.NamespacedName)
 	log.Info("Reconciling KinxCloudControllerManager")
 
@@ -80,10 +93,31 @@ func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, re
 		return ctrl.Result{}, err
 	}
 
+	// Initialize the patch helper.
+	patchHelper, err := patch.NewHelper(ccm, r.Client)
+	if err != nil {
+		return ctrl.Result{}, err
+	}
+
+	defer func() {
+		log.Info("Status Reconcile")
+		r.updateStatus(ctx, ccm)
+
+		// Always attempt to Patch the Cluster object and status after each reconciliation.
+		// Patch ObservedGeneration only if the reconciliation completed successfully
+		patchOpts := []patch.Option{}
+		if reterr == nil {
+			patchOpts = append(patchOpts, patch.WithStatusObservedGeneration{})
+		}
+		if err := patchCloudControllerManager(ctx, patchHelper, ccm, patchOpts...); err != nil {
+			reterr = kerrors.NewAggregate([]error{reterr, err})
+		}
+	}()
+
 	if !controllerutil.ContainsFinalizer(ccm, kccmFinalizer) {
 		log.Info("Finalizer 추가")
 		controllerutil.AddFinalizer(ccm, kccmFinalizer)
-		return ctrl.Result{}, r.Update(ctx, ccm)
+		// return ctrl.Result{}, r.Update(ctx, ccm)
 	}
 
 	if !ccm.DeletionTimestamp.IsZero() {
@@ -91,18 +125,8 @@ func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, re
 		return r.reconcileDelete(ctx, ccm)
 	}
 
-	defer func() (ctrl.Result, error) {
-		log.Info("Status Reconcile")
-		err := r.reconcileStatus(ctx, ccm)
-		if err != nil {
-			return ctrl.Result{}, err
-		}
-
-		return ctrl.Result{}, nil
-	}()
-
 	log.Info("Secret Reconcile")
-	err := r.reconcileSecret(ctx, ccm)
+	err = r.reconcileSecret(ctx, ccm)
 	if err != nil {
 		return ctrl.Result{}, err
 	}
@@ -131,26 +155,6 @@ func (r *KinxCloudControllerManagerReconciler) Reconcile(ctx context.Context, re
 		return ctrl.Result{}, err
 	}
 
-	log.Info("Status Reconcile")
-	err = r.reconcileStatus(ctx, ccm)
-	if err != nil {
-		return ctrl.Result{}, err
-	}
-
-	return ctrl.Result{}, nil
-}
-
-func (r *KinxCloudControllerManagerReconciler) reconcileDelete(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
-	log := r.Log.WithValues("Delete Reconcile", ccm.Namespace, ccm.Name)
-	log.Info("removing application")
-
-	controllerutil.RemoveFinalizer(ccm, kccmFinalizer)
-
-	err := r.Update(ctx, ccm)
-	if err != nil {
-		return ctrl.Result{}, fmt.Errorf("error removing finalizer %v", err)
-	}
-
 	return ctrl.Result{}, nil
 }
 
@@ -182,13 +186,12 @@ func (r *KinxCloudControllerManagerReconciler) reconcileSecret(ctx context.Conte
 	encodedCloudConf := base64.StdEncoding.EncodeToString([]byte(cloudConf))
 
 	secret := &corev1.Secret{
-		TypeMeta: metav1.TypeMeta{
-			Kind:       "Secret",
-			APIVersion: corev1.SchemeGroupVersion.String(),
-		},
 		ObjectMeta: metav1.ObjectMeta{
 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "ccm-cloud-config"),
 			Namespace: ccm.ObjectMeta.Namespace,
+			Labels: map[string]string{
+				KinxClusterNameLabel: ccm.Spec.ClusterName,
+			},
 		},
 		Data: map[string][]byte{
 			"cloud.conf": []byte(encodedCloudConf),
@@ -197,8 +200,8 @@ func (r *KinxCloudControllerManagerReconciler) reconcileSecret(ctx context.Conte
 	}
 
 	controllerutil.SetOwnerReference(ccm, secret, r.Scheme, func(or *metav1.OwnerReference) {
-		or.BlockOwnerDeletion = boolPtr(true)
-		or.Controller = boolPtr(true)
+		// or.BlockOwnerDeletion = boolPtr(true)
+		// or.Controller = boolPtr(true)
 	})
 
 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, secret, func() error {
@@ -222,12 +225,15 @@ func (r *KinxCloudControllerManagerReconciler) reconcileServiceAccount(ctx conte
 		ObjectMeta: metav1.ObjectMeta{
 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
 			Namespace: ccm.ObjectMeta.Namespace,
+			Labels: map[string]string{
+				KinxClusterNameLabel: ccm.Spec.ClusterName,
+			},
 		},
 	}
 
 	controllerutil.SetOwnerReference(ccm, serviceAccount, r.Scheme, func(or *metav1.OwnerReference) {
-		or.BlockOwnerDeletion = boolPtr(true)
-		or.Controller = boolPtr(true)
+		// or.BlockOwnerDeletion = boolPtr(true)
+		// or.Controller = boolPtr(true)
 	})
 
 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, serviceAccount, func() error {
@@ -251,6 +257,9 @@ func (r *KinxCloudControllerManagerReconciler) reconcileRole(ctx context.Context
 		ObjectMeta: metav1.ObjectMeta{
 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
 			Namespace: ccm.Namespace,
+			Labels: map[string]string{
+				KinxClusterNameLabel: ccm.Spec.ClusterName,
+			},
 		},
 		Rules: []rbacv1.PolicyRule{
 			{
@@ -317,8 +326,8 @@ func (r *KinxCloudControllerManagerReconciler) reconcileRole(ctx context.Context
 	}
 
 	controllerutil.SetOwnerReference(ccm, role, r.Scheme, func(or *metav1.OwnerReference) {
-		or.BlockOwnerDeletion = boolPtr(true)
-		or.Controller = boolPtr(true)
+		// or.BlockOwnerDeletion = boolPtr(true)
+		// or.Controller = boolPtr(true)
 	})
 
 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, role, func() error {
@@ -358,14 +367,17 @@ func (r *KinxCloudControllerManagerReconciler) reconcileRoleBinding(ctx context.
 		ObjectMeta: metav1.ObjectMeta{
 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
 			Namespace: ccm.Namespace,
+			Labels: map[string]string{
+				KinxClusterNameLabel: ccm.Spec.ClusterName,
+			},
 		},
 		RoleRef:  roleRef,
 		Subjects: subjects,
 	}
 
 	controllerutil.SetOwnerReference(ccm, roleBinding, r.Scheme, func(or *metav1.OwnerReference) {
-		or.BlockOwnerDeletion = boolPtr(true)
-		or.Controller = boolPtr(true)
+		// or.BlockOwnerDeletion = boolPtr(true)
+		// or.Controller = boolPtr(true)
 	})
 
 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, roleBinding, func() error {
@@ -388,6 +400,9 @@ func (r *KinxCloudControllerManagerReconciler) reconcileDeployment(ctx context.C
 		ObjectMeta: metav1.ObjectMeta{
 			Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
 			Namespace: ccm.Namespace,
+			Labels: map[string]string{
+				KinxClusterNameLabel: ccm.Spec.ClusterName,
+			},
 		},
 		Spec: appsv1.DeploymentSpec{
 			Replicas: int32Ptr(1),
@@ -473,8 +488,8 @@ func (r *KinxCloudControllerManagerReconciler) reconcileDeployment(ctx context.C
 	}
 
 	controllerutil.SetOwnerReference(ccm, deployment, r.Scheme, func(or *metav1.OwnerReference) {
-		or.BlockOwnerDeletion = boolPtr(true)
-		or.Controller = boolPtr(true)
+		// or.BlockOwnerDeletion = boolPtr(true)
+		// or.Controller = boolPtr(true)
 	})
 
 	result, err := controllerutil.CreateOrPatch(ctx, r.Client, deployment, func() error {
@@ -490,8 +505,8 @@ func (r *KinxCloudControllerManagerReconciler) reconcileDeployment(ctx context.C
 	return nil
 }
 
-func (r *KinxCloudControllerManagerReconciler) reconcileStatus(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) error {
-	log := r.Log.WithValues("Status", ccm.Namespace, ccm.Name)
+func (r *KinxCloudControllerManagerReconciler) updateStatus(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) error {
+	// log := r.Log.WithValues("Status", ccm.Namespace, ccm.Name)
 
 	dep := &appsv1.Deployment{}
 
@@ -502,24 +517,112 @@ func (r *KinxCloudControllerManagerReconciler) reconcileStatus(ctx context.Conte
 	if !reflect.DeepEqual(ccm.Status.Conditions, dep.Status.Conditions) {
 		ccm.Status.Conditions = dep.Status.Conditions
 
-		err := r.Status().Update(ctx, ccm)
+		// err := r.Status().Update(ctx, ccm)
+		// if err != nil {
+		// 	log.Error(err, "Failed to update Memcached status")
+		// 	return err
+		// }
+	}
+
+	return nil
+}
+
+func (r *KinxCloudControllerManagerReconciler) reconcileDelete(_ context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ctrl.Result, error) {
+	log := r.Log.WithValues("Delete Reconcile", ccm.Namespace, ccm.Name)
+	log.Info("removing application")
+
+	controllerutil.RemoveFinalizer(ccm, kccmFinalizer)
+
+	return ctrl.Result{}, nil
+}
+
+func (r *KinxCloudControllerManagerReconciler) getDescendants(ctx context.Context, ccm *crdv1alpha1.KinxCloudControllerManager) (ccmDescendants, error) {
+	var descendants ccmDescendants
+
+	// Deployment
+	if err := r.Get(ctx, types.NamespacedName{
+		Namespace: ccm.Namespace,
+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
+	}, &descendants.deployment); err != nil {
+		return descendants, err
+	}
+
+	// Secret
+	if err := r.Get(ctx, types.NamespacedName{
+		Namespace: ccm.Namespace,
+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
+	}, &descendants.secret); err != nil {
+		return descendants, err
+	}
+
+	// Serviceaccount
+	if err := r.Get(ctx, types.NamespacedName{
+		Namespace: ccm.Namespace,
+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
+	}, &descendants.serviceaccount); err != nil {
+		return descendants, err
+	}
+
+	// Role
+	if err := r.Get(ctx, types.NamespacedName{
+		Namespace: ccm.Namespace,
+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
+	}, &descendants.role); err != nil {
+		return descendants, err
+	}
+
+	// Rolebinding
+	if err := r.Get(ctx, types.NamespacedName{
+		Namespace: ccm.Namespace,
+		Name:      fmt.Sprintf("%s-%s", ccm.Spec.ClusterName, "cloud-controller-manager"),
+	}, &descendants.rolebinding); err != nil {
+		return descendants, err
+	}
+
+	return descendants, nil
+}
+
+func (c ccmDescendants) filterOwnedDescendants(ccm *crdv1alpha1.KinxCloudControllerManager) ([]client.Object, error) {
+	var ownedDescendants []client.Object
+	eachFunc := func(o runtime.Object) error {
+		obj := o.(client.Object)
+		acc, err := meta.Accessor(obj)
 		if err != nil {
-			log.Error(err, "Failed to update Memcached status")
-			return err
+			return nil //nolint:nilerr // We don't want to exit the EachListItem loop, just continue
 		}
+
+		if util.IsOwnedByObject(acc, ccm) {
+			ownedDescendants = append(ownedDescendants, obj)
+		}
+
+		return nil
 	}
 
-	return nil
+	lists := []client.Object{
+		&c.deployment,
+		&c.secret,
+		&c.rolebinding,
+		&c.role,
+		&c.serviceaccount,
+	}
+
+	for _, list := range lists {
+		if err := meta.EachListItem(list, eachFunc); err != nil {
+			return nil, err
+		}
+	}
+
+	return ownedDescendants, nil
+}
+
+func patchCloudControllerManager(ctx context.Context, patchHelper *patch.Helper, ccm *crdv1alpha1.KinxCloudControllerManager, options ...patch.Option) error {
+	return patchHelper.Patch(ctx, ccm, options...)
 }
 
 // SetupWithManager sets up the controller with the Manager.
 func (r *KinxCloudControllerManagerReconciler) SetupWithManager(mgr ctrl.Manager) error {
 	return ctrl.NewControllerManagedBy(mgr).
 		For(&crdv1alpha1.KinxCloudControllerManager{}).
-		Owns(&corev1.Secret{}).
-		Owns(&corev1.ServiceAccount{}).
-		Owns(&rbacv1.Role{}).
-		Owns(&rbacv1.RoleBinding{}).
 		Owns(&appsv1.Deployment{}).
 		WithOptions(controller.Options{MaxConcurrentReconciles: 10}).
 		Complete(r)
